openapi: 3.0.3
info:
  title: NapaChat
  version: 1.0.0
  description: RESTful endpoints for NapaChat, supporting both synchronous and asynchronous messaging.

servers:
  - url: https://api.napachat.com/v1

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [Not_Student, Student, Admin]
        createdAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          description: Time in seconds until the token expires

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user (Not_Student or Student) via email/password
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request (invalid data)
        '409':
          description: Email already registered

  /auth/login:
    post:
      summary: Log in with email/password to obtain JWT
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login, returns JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /students/verify:
    post:
      summary: Verify student license and institutional email
      tags: [Students]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseNumber:
                  type: string
                institutionEmail:
                  type: string
      responses:
        '200':
          description: Verification successful
        '400':
          description: Invalid license data
        '401':
          description: Unauthorized or missing token

  /messages:
    post:
      summary: Send an end-to-end encrypted message (Asynchronous)
      tags: [Messages]
      security:
        - BearerAuth: []
      description: |
        This operation is **asynchronous**. Messages are stored in the system and delivered based on network availability and recipient status.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipientId
                - content
              properties:
                recipientId:
                  type: string
                  description: The user ID of the message recipient
                content:
                  type: string
                  description: Encrypted message content
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: (Optional) Images or documents
      responses:
        '201':
          description: Message stored for delivery (queued)
        '400':
          description: Bad request (e.g., missing fields, invalid recipient)
        '401':
          description: Unauthorized

  /messages/{conversationId}:
    get:
      summary: Retrieve messages for a conversation (Synchronous)
      tags: [Messages]
      security:
        - BearerAuth: []
      description: |
        This operation is **synchronous**. The request immediately returns the stored messages in the conversation.
      parameters:
        - in: path
          name: conversationId
          required: true
          schema:
            type: string
          description: The unique ID representing a not_student-student conversation
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of messages to retrieve (e.g., pagination)
      responses:
        '200':
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    messageId:
                      type: string
                    senderId:
                      type: string
                    recipientId:
                      type: string
                    content:
                      type: string
                      description: Encrypted content
                    sentAt:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (e.g., if the user is not part of the conversation)

  /contacts:
    get:
      summary: Retrieve list of your student/not_student contacts
      tags: [Contacts]
      security:
      - BearerAuth: []
      parameters:
      - in: query
        name: role
        schema:
          type: string
          enum: [Not_Student, Student]
        description: Filter contacts by role (optional)
      responses:
        '200':
          description: List of contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /institutions/join:
    post:
      summary: Join an institution/hospital as a not_student
      tags: [Institutions]
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - institutionId
              properties:
                institutionId:
                  type: string
                  description: Unique identifier for the institution
      responses:
        '200':
          description: Successfully joined institution
        '404':
          description: Institution not found
        '403':
          description: Forbidden (e.g., not a not_student)

  /students/{studentId}/request-access:
    post:
      summary: Request access to a student
      tags: [Students]
      security:
      - BearerAuth: []
      parameters:
      - in: path
        name: studentId
        required: true
        schema:
          type: string
        description: ID of the student
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Optional message to the student
      responses:
        '201':
          description: Request sent successfully
        '404':
          description: Student not found
        '409':
          description: Request already exists

  /not_students/requests/{requestId}:
    put:
      summary: Accept a not_student's request for access
      tags: [Not_Students]
      security:
      - BearerAuth: []
      parameters:
      - in: path
        name: requestId
        required: true
        schema:
          type: string
        description: ID of the request
      responses:
      '200':
        description: Request accepted
      '403':
        description: Forbidden (e.g., not a student)
      '404':
        description: Request not found
